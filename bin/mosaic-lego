#!/usr/bin/env node

/*
 * Start the lego server. The project structure shall be:
 *
 * - public
 *   - index.js
 *   - index.css
 *
 * - views
 *   - index.vm
 *
 * - Moconfig.json
 * - server.js
 */

"use strict";

var express = require('express')
var velocity = require('velocityjs')
var fs = require('fs')
var path = require('path')
var debug = require('debug')('server')
var mosaic = require('../lib/mosaic')

var app = express()

var cwd = process.cwd()


app.engine('vm', function(path, options, fn) {
  var template = fs.readFileSync(path).toString()
  var macros = {
    parse: function(file) {
      var template = fs.readFileSync(cwd + '/public/' + file).toString()

      return this.eval(template)
    }
  }

  try {
    fn(null, velocity.render(template, options, macros))
  }
  catch (err) {
    fn(err)
  }
})

app.use(express.static(cwd + '/public'))
app.use(express.logger())

app.get('/', function(req, res){
  var data = {}
  var molock = require('./Molock.json')
  var moconfig = require('./Moconfig.json')
  var ns = app.get('namespace')

  for (var p in moconfig) {
    var name = p.replace(/\d+$/, '')

    data[p] = require([cwd, 'public', ns, name, molock[name], 'data.json'].join('/'))
  }

  res.render('index.vm', {
    data: data,
    molock: molock,
    molockString: JSON.stringify(molock)
  })
})


var spath = path.join(cwd, 'server.js')

if (fs.existsSync(spath)) require(spath)(app)


var port = process.argv[2]

port = /^\d{4,5}$/.test(port) ? port : mosaic.get('port')
debug('Listening on', port)
app.listen(port).on('error', function(err) {
  debug('Cannot start server due to', err.code)
})