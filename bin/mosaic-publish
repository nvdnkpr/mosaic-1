#!/usr/bin/env node

"use strict";

var semver = require('semver')
var program = require('commander')
var path = require('path')
var fs = require('fs')
var tar = require('tar')
var zlib = require('zlib')
var fstream = require('fstream')
var Packer = require('fstream-npm')
var request = require('request')
var debug = require('debug')('mosaic:publish')
var mosaic = require('../lib/mosaic')


program.parse(process.argv)

var args = program.args
var cwd = process.cwd()
var dpath = cwd

if (args[0]) dpath = path.join(cwd, args[0])

var fpath = path.join(dpath, 'package.json')

if (!fs.existsSync(fpath)) mosaic.error('没找到 package.json')

var mo = require(fpath)


console.log(mo)
if (isValid(mo)) publish(dpath)


function publish(dpath){
  new Packer({ path: dpath, type: 'Directory', isDirectory: true })
    .pipe(tar.Pack())
    .pipe(zlib.Gzip())
    .pipe(fstream.Writer('package.tgz'))
    .on('close', afterTar)
}

function afterTar(err) {
  var parts = mo.name.split(/\//)
  var ns = parts[0]
  var name = parts[1]
  var url = mosaic.remote([ns , name, mo.version ].join('\/'))

  var r = request.post(url, callback)
  var form = r.form()

  form.append('tarball', fs.createReadStream('package.tgz'))

  function callback(err, res, body) {
    if (err) return mosaic.fatal(err)

    switch (res.statusCode) {
      case 201:
        mosaic.log('success', body)
        break
      case 409:
        mosaic.error(body)
        break
      default:
        mosaic.error('failed', body)
    }

    fs.unlinkSync('package.tgz')
  }
}

function isValid(mo){
  var name = mo.name
  var version = mo.version
  var valid = true

  function fail(msg) {
    valid = false
    mosaic.error(msg)
  }

  if (!name) fail('未填写名称')
  if (!version) fail('未填写版本')

  if (!/^mosaics\/\w+$/.test(name) && !/^\w+(?:\.\w+)+\/\w+$/.test(name)) fail('名称不符合 命名空间/组件名 规范')
  if (!semver.valid(version)) fail('版本 ' + version + ' 不合规范')

  return valid
}
