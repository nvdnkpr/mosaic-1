#!/usr/bin/env node

/*
 * Start the mosaic server.
 * The folder structure shall be:
 *
 * - mosaics
 *   - wangwang
 *   - dropdown
 *   - breadcrumb
 *
 * wangwang, dropdown, and breadcrumb shall be in version controlled in their
 * own repositories, such as:
 *
 * - github.com/mosaics/wangwang
 * - github.com/mosaics/dropdown
 * - github.com/mosaics/breadcrumb
 *
 * To put a mosaic onto CDN, use `mo publish` command.
 */

"use strict";

var express = require('express')
var fs = require('fs')
var path = require('path')
var mosaic = require('../lib/mosaic')
var marked = require('marked')


var app = express()
var cwd = process.cwd()


app.set('views', path.resolve(__dirname, '../views'))
app.set('view engine', 'jade')

app.use(express.static(cwd))
app.use(express.logger())
app.use(express.favicon())
app.use(express.logger('dev'))
app.use(app.router)

var spath = path.join(cwd, 'server.js')

if (fs.existsSync(spath)) require(spath)(app)


app.get('/', function(req, res) {
  res.render('index', { title: 'Mosaics' })
})

app.get('/:style.css', function(req, res) {
  res.sendfile(path.resolve(__dirname, '../public/stylesheets/' + req.params.style + '.css'))
})

app.get('/:js.js', function(req, res) {
  res.sendfile(path.resolve(__dirname, '../public/javascripts/' + req.params.js + '.js'))
})

app.get('/:name', function(req, res) {
  var name = req.params.name
  var dpath = path.join(process.cwd(), name)
  var fpath = path.join(dpath, 'README.md')

  if (!(fs.existsSync(dpath) && fs.existsSync(fpath))) {
    res.send(404, 'Mosaic folder not created!')
  }
  else {
    var readme = fs.readFileSync(fpath, 'utf-8')
    var lines = readme.split(/\r?\n/)
    var open = false
    var result = []
    var startPtn = /^## ?(?:Usage|Demo|用法)/
    var closePtn = /^##[^#]/
    var jsCodePtn = /^```\s*(?:javascript|js)/
    var codePtn = /^```/
    var currentSyntax

    for (var i = 0; i < lines.length; i++) {
      var line = lines[i]

      if (open && closePtn.test(line)) break
      if (open && !codePtn.test(line)) result.push(line)
      if (open && codePtn.test(line)) {
        if (currentSyntax === 'js') {
          result.push('</script>')
          currentSyntax = null
        }
        else if (jsCodePtn.test(line)) {
          currentSyntax = 'js'
          result.push('<script>')
        }
      }
      if (!open && startPtn.test(line)) open = true
    }

    res.render('mosaic', {
      name: name,
      fullname: 'mosaics/' + name,
      readme: marked(readme),
      demo: marked(result.join('\n')),
      demojs: fs.existsSync(path.join(dpath, 'demo.js')),
      democss: fs.existsSync(path.join(dpath, 'demo.css'))
    })
  }
})

var port = process.argv[2]

port = /^\d{4,5}$/.test(port) ? port : mosaic.get('port')
mosaic.log('Listening on', port)
app.listen(port).on('error', function(err) {
  mosaic.log('Cannot start server due to', err.code)
})